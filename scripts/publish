#!/usr/bin/env bash

#
# publish <version-number> [ --production ] [ npm-publish-args... ]
#
# Publishes a release that was previously generated by the `version` script in this dir.
# When the --production flag is not given (the default), will publish to a local NPM registry
# that is assumed to be running. At the very end, will push the current branch and the version
# tag to Github, but only if the --production flag is present. Any other arguments that are
# passed into this script will be forwarded on to `npm publish` command, which is useful for
# publishing a prerelease with the --tag argument.
#

set -e # always immediately exit upon error

scripts_dir=`dirname $0`
version_num=$1
production_arg=$2
publish_args='--access public'

if [[ ! "$version_num" ]]
then
  echo 'You must supply a version argument'
  exit 1
fi

shift # remove version from ordered arguments

if [[ "$production_arg" == '--production' ]]
then
  shift # remove production from ordered arguments
  echo 'Publishing to PRODUCTION'
else
  echo 'Publishing as a TEST'
  publish_args="$publish_args --registry http://localhost:4873"
fi

"$scripts_dir/require-clean-working-tree"

version_tag="v$version_num"

echo 'Checking out dist files...'
rm -rf dist # clear what's already there
git checkout --quiet "$version_tag" -- dist
git reset --quiet # unstage dist files, but keep in working tree

echo 'Publishing dist files...'
cd dist
npm publish $publish_args "$@"
cd - # go back to root

if [[ "$production_arg" == '--production' ]]
then
  echo
  echo 'Committing the version bump...'
  echo
  git checkout "$version_tag" -- package.json # will be staged afterwards
  git commit -m 'bump version'

  echo
  echo 'Pushing to Github...'
  echo
  git push
  git push origin "$version_tag"
fi
